{
  "server": {
    "start": "Service Started",
    "start_time": "Starting Time: {{ .start_time }}",
    "goi_version": "goi Version: {{ .version }}",
    "current_time_zone": "Current Time Zone: {{ .time_zone }}",
    "log_info": "- [{{ .name }}] Split Size: {{ .split_size }} Split Date: {{ .split_time }}",
    "cache": {
      "max_size": "Cache Max Size: {{ .max_size }}",
      "evict_policy": "- Evict Policy: {{ .evict_policy }}",
      "expiration_policy": "- Expiration Policy: {{ .expiration_policy }}",
      "noeviction": "The maximum cache exceeds: {{ .max_size }}"
    },
    "invalid_operation": "{{ .name }} Invalid Operation",
    "listen_address": "Listen Address: {{ .bind_address }}",
    "shutdown_handler": "Shutdown service handler [{{ .name }}]...",
    "shutdown_handler_error": "Shutdown service handler error: {{ .err }}",
    "close_database": "Close the database connection...",
    "close_database_error": "Close {{ .engine }} {{ .name }} error: {{ .err }}",
    "stop_time": "Stopping Time: {{ .stop_time }}",
    "run_time": "Run Time: {{ .run_time }}",
    "stop": "Service Stopped\n",
    "response_json_error": "Response to json data error: {{ .err }}\n",
    "response_error": "Response error: {{ .err }}\n",
    "url_not_allowed": "URL NOT FOUND \"{{ .path }}\".",
    "method_not_allowed": "Method \"{{ .method }}\" not allowed."
  },
  "second": "second",
  "minute": "minute",
  "hour": "hour",
  "day": "day",
  "router": {
    "path_already_exists": "Path already exists: \"{{ .path }}\"\n",
    "path_collision": "Router Path \"{{ .path }}\" collision: \"{{ .collision_path }}\"\n",
    "converter_is_not_exists": "The route converter does not exist: \"{{ .name }}\""
  },
  "context": {
    "read_body_error": "Read Body error: {{ .err }}\n",
    "parse_body_error": "Parsing Body error: {{ .err }}\n",
    "unmarshal_body_error": "Unmarshal json error: {{ .err }}\n"
  },
  "validator": {
    "validator_is_not_validateFunc": "The validator \"{{ .name }}\" has no validateFunc method",
    "params_error": "Parameter error: {{ .err }}"
  },
  "params": {
    "required_params": "Missing \"{{ .name }}\" required parameter",
    "params_is_not_ptr": "The \"{{ .name }}\" parameter must be of pointer type",
    "params_is_not_struct_ptr": "\"{{ .name }}\" The parameter must be a structure pointer type",
    "is_not_required_or_optional": "There must be a required and optional label for the \"{{ .name }}\" field",
    "params_is_not_can_set": "\"{{ .name }}\" is a value that cannot be assigned",
    "params_type_is_unsupported": "Unsupported variable types",
    "value_invalid": "The type of \"{{ .name }}\" is invalid"
  },
  "log": {
    "invalid_path": "Path is invalid: \"\"\n",
    "invalid_level": "Level is invalid []\n",
    "invalid_file": "File is invalid nil\n",
    "invalid_object": "Logger is invalid nil\n",
    "split_log_stat_error": "Log splitting-[{{ .name }}] Error Obtaining log file information: {{ .err }}\n",
    "split_log_rename_error": "Log splitting-[{{ .name }}] Log renaming error: {{ .err }}\n"
  },
  "database": {
    "transaction_cannot_be_nested_error": "Transactions cannot be nested",
    "databases_not_error": "No \"{{ .name }}\" in DATABASES\n",
    "select_error": "{{ .engine }} DataBase \"{{ .db_name }}\" Query error: {{ .err }}\n",
    "before_migration": "Before migration BeforeHandler ...",
    "before_migration_error": "Before migration BeforeHandler error: {{ .err }}\n",
    "migration": "Migrating {{ .engine }} {{ .name }} database: {{ .db_name }} table: {{ .tb_name }}...",
    "migration_error": "Migration error: {{ .err }}\n",
    "after_migration": "After migration AfterHandler ...",
    "after_migration_error": "After migration AfterHandler error: {{ .err }}\n",
    "not_SetModel_error": "Please set SetModel first\n",
    "field_is_not_error": "{{ .name }} field does not exist\n",
    "where_args_placeholder_error": "The number of arguments does not match the placeholder\n",
    "is_not_ptr": "{{ .name }} is not a pointer type",
    "is_not_slice_or_array": "{{ .name }} is not a slice or array",
    "is_not_struct_ptr_or_map": "{{ .name }} is not a struct structure pointer or a map[string]interface{} dictionary",
    "is_not_slice_struct_ptr_or_map": "{{ .name }} is not a []struct structure pointer slice or a []map[string]interface{} dictionary slice"
  },
  "serializer": {
    "is_not_struct_ptr": "{{ .name }} is not a struct pointer",
    "field_tag_field_type_error": "The '{{ .name }}' field label `field_type` is undefined\n",
    "field_is_not_null_error": "field cannot be empty",
    "field_type_string_error": "field is not a string type",
    "varchar_len_error": "contains more than {{ .length }} character"
  },
  "auth": {
    "empty_password": "Password cannot be empty",
    "salt_generation_error": "Failed to generate password saltï¼š{{ .err }}"
  },
  "jwt": {
    "decode_error": "Decode Error",
    "expired_signature": "Expired Signature Error"
  },
  "crypto": {
    "aes": {
      "empty_data": "Data length is zero",
      "invalid_padding_length": "Invalid padding length",
      "invalid_padding": "Invalid padding",
      "base64_decode_error": "Base64 decode failed: {{.err}}",
      "new_cipher_error": "Failed to create cipher: {{.err}}",
      "invalid_ciphertext_length": "Invalid ciphertext length"
    },
    "pbkdf2": {
      "invalid_format": "Invalid encoding string format",
      "invalid_iterations": "Invalid iteration count: {{ .err }}",
      "invalid_salt": "Invalid salt value: {{ .err }}"
    },
    "rsa": {
      "public_key_decode_error": "Failed to decode public key",
      "public_key_parse_error": "Failed to parse public key: {{ .err }}",
      "public_key_type_error": "Failed to convert public key type",
      "private_key_decode_error": "Failed to decode private key",
      "private_key_parse_error": "Failed to parse private key: {{ .err }}"
    }
  }
}
